// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/user_service/contract.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/manc88/demo/internal/models"
	user_service "github.com/manc88/demo/internal/user_service"
)

// MockICreateCommand is a mock of ICreateCommand interface.
type MockICreateCommand struct {
	ctrl     *gomock.Controller
	recorder *MockICreateCommandMockRecorder
}

// MockICreateCommandMockRecorder is the mock recorder for MockICreateCommand.
type MockICreateCommandMockRecorder struct {
	mock *MockICreateCommand
}

// NewMockICreateCommand creates a new mock instance.
func NewMockICreateCommand(ctrl *gomock.Controller) *MockICreateCommand {
	mock := &MockICreateCommand{ctrl: ctrl}
	mock.recorder = &MockICreateCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICreateCommand) EXPECT() *MockICreateCommandMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockICreateCommand) Create(arg0 context.Context, arg1 *models.User) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockICreateCommandMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockICreateCommand)(nil).Create), arg0, arg1)
}

// MockIDeleteCommand is a mock of IDeleteCommand interface.
type MockIDeleteCommand struct {
	ctrl     *gomock.Controller
	recorder *MockIDeleteCommandMockRecorder
}

// MockIDeleteCommandMockRecorder is the mock recorder for MockIDeleteCommand.
type MockIDeleteCommandMockRecorder struct {
	mock *MockIDeleteCommand
}

// NewMockIDeleteCommand creates a new mock instance.
func NewMockIDeleteCommand(ctrl *gomock.Controller) *MockIDeleteCommand {
	mock := &MockIDeleteCommand{ctrl: ctrl}
	mock.recorder = &MockIDeleteCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDeleteCommand) EXPECT() *MockIDeleteCommandMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockIDeleteCommand) Delete(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIDeleteCommandMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIDeleteCommand)(nil).Delete), arg0, arg1)
}

// MockIGetAllCommand is a mock of IGetAllCommand interface.
type MockIGetAllCommand struct {
	ctrl     *gomock.Controller
	recorder *MockIGetAllCommandMockRecorder
}

// MockIGetAllCommandMockRecorder is the mock recorder for MockIGetAllCommand.
type MockIGetAllCommandMockRecorder struct {
	mock *MockIGetAllCommand
}

// NewMockIGetAllCommand creates a new mock instance.
func NewMockIGetAllCommand(ctrl *gomock.Controller) *MockIGetAllCommand {
	mock := &MockIGetAllCommand{ctrl: ctrl}
	mock.recorder = &MockIGetAllCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGetAllCommand) EXPECT() *MockIGetAllCommandMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockIGetAllCommand) GetAll(ctx context.Context) ([]*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIGetAllCommandMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIGetAllCommand)(nil).GetAll), ctx)
}

// MockICommands is a mock of ICommands interface.
type MockICommands struct {
	ctrl     *gomock.Controller
	recorder *MockICommandsMockRecorder
}

// MockICommandsMockRecorder is the mock recorder for MockICommands.
type MockICommandsMockRecorder struct {
	mock *MockICommands
}

// NewMockICommands creates a new mock instance.
func NewMockICommands(ctrl *gomock.Controller) *MockICommands {
	mock := &MockICommands{ctrl: ctrl}
	mock.recorder = &MockICommandsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICommands) EXPECT() *MockICommandsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockICommands) Create(arg0 context.Context, arg1 *models.User) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockICommandsMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockICommands)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockICommands) Delete(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockICommandsMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockICommands)(nil).Delete), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockICommands) GetAll(ctx context.Context) ([]*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockICommandsMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockICommands)(nil).GetAll), ctx)
}

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIRepository) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIRepositoryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIRepository)(nil).Close))
}

// Create mocks base method.
func (m *MockIRepository) Create(arg0 context.Context, arg1 *models.User) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockIRepository) Delete(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIRepository)(nil).Delete), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockIRepository) GetAll(ctx context.Context) ([]*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIRepositoryMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIRepository)(nil).GetAll), ctx)
}

// MockIStorage is a mock of IStorage interface.
type MockIStorage struct {
	ctrl     *gomock.Controller
	recorder *MockIStorageMockRecorder
}

// MockIStorageMockRecorder is the mock recorder for MockIStorage.
type MockIStorageMockRecorder struct {
	mock *MockIStorage
}

// NewMockIStorage creates a new mock instance.
func NewMockIStorage(ctrl *gomock.Controller) *MockIStorage {
	mock := &MockIStorage{ctrl: ctrl}
	mock.recorder = &MockIStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStorage) EXPECT() *MockIStorageMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIStorage) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIStorage)(nil).Close))
}

// Create mocks base method.
func (m *MockIStorage) Create(arg0 context.Context, arg1 *models.User) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIStorageMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIStorage)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockIStorage) Delete(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIStorageMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIStorage)(nil).Delete), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockIStorage) GetAll(ctx context.Context) ([]*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIStorageMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIStorage)(nil).GetAll), ctx)
}

// MockICache is a mock of ICache interface.
type MockICache struct {
	ctrl     *gomock.Controller
	recorder *MockICacheMockRecorder
}

// MockICacheMockRecorder is the mock recorder for MockICache.
type MockICacheMockRecorder struct {
	mock *MockICache
}

// NewMockICache creates a new mock instance.
func NewMockICache(ctrl *gomock.Controller) *MockICache {
	mock := &MockICache{ctrl: ctrl}
	mock.recorder = &MockICacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICache) EXPECT() *MockICacheMockRecorder {
	return m.recorder
}

// Load mocks base method.
func (m *MockICache) Load(arg0 context.Context) ([]*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", arg0)
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockICacheMockRecorder) Load(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockICache)(nil).Load), arg0)
}

// Reset mocks base method.
func (m *MockICache) Reset(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockICacheMockRecorder) Reset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockICache)(nil).Reset), arg0)
}

// Store mocks base method.
func (m *MockICache) Store(arg0 context.Context, arg1 []*models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockICacheMockRecorder) Store(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockICache)(nil).Store), arg0, arg1)
}

// MockIMessageBroker is a mock of IMessageBroker interface.
type MockIMessageBroker struct {
	ctrl     *gomock.Controller
	recorder *MockIMessageBrokerMockRecorder
}

// MockIMessageBrokerMockRecorder is the mock recorder for MockIMessageBroker.
type MockIMessageBrokerMockRecorder struct {
	mock *MockIMessageBroker
}

// NewMockIMessageBroker creates a new mock instance.
func NewMockIMessageBroker(ctrl *gomock.Controller) *MockIMessageBroker {
	mock := &MockIMessageBroker{ctrl: ctrl}
	mock.recorder = &MockIMessageBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMessageBroker) EXPECT() *MockIMessageBrokerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIMessageBroker) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIMessageBrokerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIMessageBroker)(nil).Close))
}

// Write mocks base method.
func (m *MockIMessageBroker) Write(dest string, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", dest, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockIMessageBrokerMockRecorder) Write(dest, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockIMessageBroker)(nil).Write), dest, data)
}

// MockITransport is a mock of ITransport interface.
type MockITransport struct {
	ctrl     *gomock.Controller
	recorder *MockITransportMockRecorder
}

// MockITransportMockRecorder is the mock recorder for MockITransport.
type MockITransportMockRecorder struct {
	mock *MockITransport
}

// NewMockITransport creates a new mock instance.
func NewMockITransport(ctrl *gomock.Controller) *MockITransport {
	mock := &MockITransport{ctrl: ctrl}
	mock.recorder = &MockITransportMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITransport) EXPECT() *MockITransportMockRecorder {
	return m.recorder
}

// RegisterUserService mocks base method.
func (m *MockITransport) RegisterUserService(arg0 user_service.ICommands) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterUserService", arg0)
}

// RegisterUserService indicates an expected call of RegisterUserService.
func (mr *MockITransportMockRecorder) RegisterUserService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUserService", reflect.TypeOf((*MockITransport)(nil).RegisterUserService), arg0)
}
